package net.dugged.cutelessmod;

import net.minecraft.client.Minecraft;
import net.minecraft.client.settings.KeyBinding;
import net.minecraftforge.client.GuiIngameForge;
import net.minecraftforge.client.settings.KeyConflictContext;
import net.minecraftforge.common.config.Config;
import net.minecraftforge.common.config.ConfigManager;
import net.minecraftforge.fml.client.registry.ClientRegistry;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.InputEvent;
import net.minecraftforge.fml.relauncher.Side;
import org.lwjgl.input.Keyboard;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Mod.EventBusSubscriber(Side.CLIENT)
public class KeyBindings {
    public static final List<KeyBinding> autoGenKeybinds = new ArrayList<>();

    public static final KeyBinding carpetFaceIntoKey = new KeyBinding("key.cutelessmod.face_into", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding carpetFlipFaceKey = new KeyBinding("key.cutelessmod.flip_face", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding chunkDebug = new KeyBinding("key.cutelessmod.chunk_debug", KeyConflictContext.IN_GAME, Keyboard.KEY_F6, Reference.NAME);
    public static final KeyBinding emptyScreenKey = new KeyBinding("key.cutelessmod.emptyscreen", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding gammaHaxKey = new KeyBinding("key.cutelessmod.gammahax", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding highlightEntitiesKey = new KeyBinding("key.cutelessmod.highlight_entities", KeyConflictContext.IN_GAME, Keyboard.KEY_C, Reference.NAME);
    public static final KeyBinding putDespawnSphereKey = new KeyBinding("key.cutelessmod.put_despawn_sphere", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding putFrequencyAnalyzerKey = new KeyBinding("key.cutelessmod.put_frequency_analyzer", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding putItemCounterKey = new KeyBinding("key.cutelessmod.put_item_counter", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding putRandomTickAreaKey = new KeyBinding("key.cutelessmod.put_random_tick_area", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding reloadAudioEngineKey = new KeyBinding("key.cutelessmod.reload_audio", KeyConflictContext.IN_GAME, Keyboard.KEY_B, Reference.NAME);
    public static final KeyBinding repeatLastCommandKey = new KeyBinding("key.cutelessmod.repeat_last_command", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding resetItemCounterKey = new KeyBinding("key.cutelessmod.reset_item_counter", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding snapaimKey = new KeyBinding("key.cutelessmod.snapaim", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding toggleBeaconAreaKey = new KeyBinding("key.cutelessmod.toggle_beacon_area", KeyConflictContext.IN_GAME, Keyboard.KEY_J, Reference.NAME);
    public static final KeyBinding zoomerKey = new KeyBinding("key.cutelessmod.zoomer", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);
    public static final KeyBinding xrayToggleKey = new KeyBinding("key.cutelessmod.xray.toggle", KeyConflictContext.IN_GAME, Keyboard.KEY_NONE, Reference.NAME);

    public static void init() {
        if (Configuration.autoGenKeybinds) {
            Arrays.stream(Configuration.class.getDeclaredFields())
                    .filter(f -> boolean.class.equals(f.getType()))
                    .filter(f -> !(f.isAnnotationPresent(Config.RequiresMcRestart.class) || f.isAnnotationPresent(Config.RequiresWorldRestart.class)))
                    .map(f -> new KeyBinding(f.getName(), Keyboard.KEY_NONE, Reference.NAME + " Autogenerated"))
                    .peek(autoGenKeybinds::add)
                    .forEach(ClientRegistry::registerKeyBinding);
        }

        ClientRegistry.registerKeyBinding(carpetFaceIntoKey);
        ClientRegistry.registerKeyBinding(carpetFlipFaceKey);
        ClientRegistry.registerKeyBinding(chunkDebug);
        ClientRegistry.registerKeyBinding(emptyScreenKey);
        ClientRegistry.registerKeyBinding(gammaHaxKey);
        ClientRegistry.registerKeyBinding(highlightEntitiesKey);
        ClientRegistry.registerKeyBinding(putDespawnSphereKey);
        ClientRegistry.registerKeyBinding(putFrequencyAnalyzerKey);
        ClientRegistry.registerKeyBinding(putItemCounterKey);
        ClientRegistry.registerKeyBinding(putRandomTickAreaKey);
        ClientRegistry.registerKeyBinding(reloadAudioEngineKey);
        ClientRegistry.registerKeyBinding(repeatLastCommandKey);
        ClientRegistry.registerKeyBinding(resetItemCounterKey);
        ClientRegistry.registerKeyBinding(snapaimKey);
        ClientRegistry.registerKeyBinding(toggleBeaconAreaKey);
        ClientRegistry.registerKeyBinding(zoomerKey);
        ClientRegistry.registerKeyBinding(xrayToggleKey);
    }

    @SubscribeEvent
    public static void onKeyPressed(final InputEvent.KeyInputEvent event) {
        for (final KeyBinding key : autoGenKeybinds) {
            if (key.isPressed()) {
                try {
                    final Field field = Configuration.class.getField(key.getKeyDescription());
                    final boolean state = !field.getBoolean(Configuration.class);
                    field.setBoolean(Configuration.class, state);
                    ConfigManager.sync(Reference.MODID, Config.Type.INSTANCE);
                    Minecraft.getMinecraft().ingameGUI.setOverlayMessage(String.format("%s %s.", field.getName(), state ? "enabled" : "disabled"), false);

                    // Super ugly place to put this code, but It Works:tm:.
                    if ("showScoreboards".equals(field.getName())) {
                        GuiIngameForge.renderObjective = state;
                    }
                } catch (NoSuchFieldException | IllegalAccessException ignored) {
                    // noop
                }
            }
        }
    }
}
